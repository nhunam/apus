// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//+build !wireinject

package main

import (
	"apuscorp.com/core/auth-service/api"
	"apuscorp.com/core/auth-service/cache"
	"apuscorp.com/core/auth-service/client"
	"apuscorp.com/core/auth-service/dao"
	"apuscorp.com/core/auth-service/database"
	"apuscorp.com/core/auth-service/i18n"
	"apuscorp.com/core/auth-service/log"
	"apuscorp.com/core/auth-service/redis"
	"apuscorp.com/core/auth-service/router"
	"gitlab.com/apus-backend/base-service/config"
	"gitlab.com/apus-backend/base-service/rabbitmq"
)

// Injectors from wire.go:

func InitApp() (App, error) {
	configConfig, err := config.LoadConfig()
	if err != nil {
		return App{}, err
	}
	appLog, err := log.NewAppLog(configConfig)
	if err != nil {
		return App{}, err
	}
	databaseDatabase, err := database.NewDatabase(configConfig)
	if err != nil {
		return App{}, err
	}
	redisRedis, err := redis.NewRedis(configConfig)
	if err != nil {
		return App{}, err
	}
	cacheCache, err := cache.NewCache(configConfig)
	if err != nil {
		return App{}, err
	}
	i18nI18n, err := i18n.NewI18n()
	if err != nil {
		return App{}, err
	}
	clientClient, err := client.NewClient(configConfig)
	if err != nil {
		return App{}, err
	}
	userCredentialsDao := &dao.UserCredentialsDao{
		Db:     databaseDatabase,
		I18n:   i18nI18n,
		Client: clientClient,
	}
	routerRouter, err := router.NewRouter(configConfig, userCredentialsDao, i18nI18n)
	if err != nil {
		return App{}, err
	}
	rabbitMQ, err := rabbitmq.NewRabbitMQ(configConfig)
	if err != nil {
		return App{}, err
	}
	authV1Api := &api.AuthV1Api{
		Router:   routerRouter,
		RabbitMQ: rabbitMQ,
		Config:   configConfig,
	}
	app := App{
		Config:    configConfig,
		AppLog:    appLog,
		Database:  databaseDatabase,
		Redis:     redisRedis,
		Cache:     cacheCache,
		Router:    routerRouter,
		RabbitMQ:  rabbitMQ,
		I18n:      i18nI18n,
		AuthV1Api: authV1Api,
	}
	return app, nil
}
